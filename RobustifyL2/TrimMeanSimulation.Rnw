\documentclass{article}
\usepackage{amsmath,amsfonts,bm,fullpage}
\usepackage{natbib}
\bibliographystyle{abbrvnat}
\newcommand{\ProjMean}{{\widehat{\bm S}_{2}}}
\newcommand{\R}{{\mathbb{R}}}
\begin{document}

\begin{center}
\Large{\bf Robustifying the Projected Mean}
\end{center}
\normalsize
This is the literature I have found methods to robustify the $L_2$ estimator for various data types.  Specifically I focus on the trimmed and winsorized means.

<<setup,include=FALSE>>=
library(rotations)
#source("/Users/stanfill/Documents/GitHub/robustSO3/robustFunctions.R")

# set global chunk options
opts_chunk$set(fig.path='Figure/', fig.align='center', fig.show='hold',dev='png')
options(replace.assign=TRUE,width=50)
@
 
\section{Trimmed Means}

Assume the sample of size $n$, $x_1,\dots,x_n$, has empirical distribution function $F_n$.  The sample $\alpha$-trimmed mean, according to \cite{huber2009} page 10, is
\[
\bar{X}_\alpha=\frac{1}{1-2\alpha}\int_{\alpha}^{1-\alpha}F_n^{-1}(t)dt.
\]

The following is taken from Section 4 of \cite{laha2011}. In the circular context, suppose $\theta$ is a circular random variable with p.d.f.~$f(\theta)$ and $0<\gamma\leq 0.5$ is fixed.  Let $\alpha,\beta$ be two points on the unit circle satisfying
\[
\int_{\beta}^\alpha f(\theta)d\theta=1-2\gamma.
\] 
The circular $\gamma$-trimmed mean is
\[
\mu_\gamma=\text{arg}\left[\frac{1}{1-2\gamma}\int^{\alpha}_\beta\exp(\imath\theta)f(\theta)d\theta\right].
\]
In their Theorem 4.1 they show it is SB-robust for the circular von Mises distribution.  In \cite{laha2013} they show it is SB-robust for the wrapped normal distribution too.  Remember SB-robustness is always with respect to some dispersion measure.

<<tmean,eval=FALSE,include=FALSE>>=
rangle<-rcayley
n<-50
kappa<-100
p1<-.1
p2<-.1
Scont<-genR(pi/2) #slippage mean

Rs<-ruarsCont(n,rangle,kappa,p1,S=id.SO3,Scont)
Qs<-Q4(Rs)
tMean<-trimMean(Qs,p2,HnFun)

dist(mean(Qs))
dist(trimMean(Qs,p2,HnFun))
dist(trimMean(Qs,p2,HnFun,T))
dist(median(Qs))
plot(Rs,center=SO3(tMean),show_estimates='all')
@

\section{Weighted Means}

According to \cite{huber2009} Section 11.2.2 the current best possible break down for a $d$-dimensional affine equivilant estimator is
\[
\epsilon^*=\frac{n-2d+1}{2n-2d+1}.
\]
So for us, this would be $(n-5)/(2n-5)$.  This break-down is achieved by the weighted average of the points $\bm x_i$ from $\bm X$ with weights $w_i=w(r_i)$ where
\[
r_i=\sup_{\bm u}\frac{\bm u^\top\bm x_i-\text{MED}(\bm u^\top\bm X)}{\text{MAD}(\bm u^\top\bm X)}
\]
and $w(r)$ is a strictly positive, decreasing fuction of $r\geq 0$, with $w(r)r$ bounded.  I think $r_i$ can be replaced with any one-dimensional projection of the outlyingness of the $\bm x_i$.  For example, $H_n$ or the distance the mean moves when $\bm R_i$ is removed.

<<weightedMean,include=FALSE,eval=FALSE>>=
Rs<-Q4(ruarsCont(n,rangle,kappa,p1,S=id.SO3,Scont))
wsHn<-1/sqrt(HnFun(Rs))
wsVals<-1/sqrt(HnFun(Rs,scale=F))
wsRDist<-1/MeanMove(Rs,method='intrinsic')
wsEDist<-1/MeanMove(Rs)

dist(weighted.mean(Rs,wsHn))
dist(weighted.mean(Rs,wsVals))
dist(weighted.mean(Rs,wsRDist))
dist(weighted.mean(Rs,wsEDist))
dist(mean(Rs))
dist(median(Rs))
dist(trimMean(Qs,p2,HnFun))
@

<<HnDist,include=FALSE,echo=FALSE,eval=FALSE>>=
kappa<-10
Rs<-Q4(ruarsCont(n,rangle,kappa,p1,S=id.SO3,Scont))
Hn<-sqrt(HnFun(Rs))
Vals<-sqrt(HnFun(Rs,full=F))
EDist<-MeanMove(Rs)

plot(EDist,Hn)
plot(EDist,Vals)
plot(Vals,Hn)
@

\section{Winsorized Means}
The winsorized mean (in my mind) coincides with the multidimensional Huber estimator.  From the intervals Appendix, the infulece function of $\ProjMean$ for $\bm R(r,\bm u)$ distributed according to a directionally symmetric distribution on $SO(3)$ $F$ is
\[
\text{IF}_2(\bm R_i,F)=\frac{3}{1+2E[\cos(r)]}\sin(r)\bm u.
\]

Thus the gross error sensitivity is
\[
\|\text{IF}_2(\bm R_i,F)\|=\|\frac{3}{1+2E[\cos(r)]}\sin(r)\bm u\|=\left|\frac{3\sin(r)}{1+2E[\cos(r)]}\right|=\frac{3\sin(|r|)}{1+2E[\cos(r)]}
\]

<<IFheatMatp,eval=FALSE,include=FALSE>>=
#Try to make a heat map representing the influence function of the 2D projected mean
#For the projected mean the IF is proportional to sin(r_i)u_i
len<-25

theta <- acos(seq(-1, 1,length=len))
phi <- seq(-pi, pi,length=len)
ri <- seq(0,pi,length=len)
IFS2<-expand.grid(sin(theta) * cos(phi),sin(theta) * sin(phi),sin(ri))
names(IFS2)<-c("U1","U2","sinri")

qplot(U1,U2,data=IFS2,colour=as.factor(sinri))

ts<-seq(-pi,pi,length=100)
plot(ts,sin(ts),type='l')+abline(h=0,v=0)
@

<<winsMean,include=FALSE,eval=FALSE>>=
rangle<-rcayley
n<-50
kappa<-100
p1<-.1
p2<-.1
Scont<-genR(pi/2) #slippage mean
Rs<-ruarsCont(n,rangle,kappa,p1,S=id.SO3,Scont)

#Cener about the mean
plot(Rs,id.SO3)

wRs<-winzMean(Rs,.1)
plot(wRs$Rs,center=id.SO3)
@

<<simulation,echo=FALSE>>=
dist<-c("Cayley","vonMises")
rdist<-c(rcayley,rvmises)
kappa<-c(.5,1,10)
n<-c(10,50)
res<-expand.grid(dist,kappa,n)
res<-data.frame(Dist=res$Var1,kappa=res$Var2,n=res$Var3,Mean=0,Median=0,Trim=0,Winz=0,Weight=0)
Scont<-genR(pi/2)
B<-100

pCont<-.1   #level of contamintion in the simulated data sets
alpha<- .1  #percent to trim/winsorize

for(i in 1:nrow(res)){
  
  dis<-2-i%%2
  mediani<-meani<-trimi<-winzi<-weighti<-0
    
  for(j in 1:B){
    Rs<-ruarsCont(n=res$n[i],rangle=rdist[dis][[1]],kappa=res$kappa[i],pCont,S=id.SO3,Scont)
    mediani<-mediani+dist(median(Rs))
    meani<-meani+dist(mean(Rs))
    winzi<-winzi+dist(winzMean(Rs,alpha,HnFun)$Shat)
    
    Qs<-Q4(Rs)
    trimi<-trimi+dist(trimMean(Qs,alpha,HnFun)$Shat)
    weighti<-weighti+dist(weighted.mean(Qs,w=1/sqrt(HnFun(Qs))))
  }
  
  res$Median[i]<-mediani/B
  res$Mean[i]<-meani/B
  res$Weight[i]<-weighti/B
  res$Winz[i]<-winzi/B
  res$Trim[i]<-trimi/B
}

res
@

%\bibliographystyle{plain}
\bibliography{../OutlierDetection/RobustRefs}
\end{document}